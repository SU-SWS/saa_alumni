/**
 * Find the preferred phone number and type
 *
 * @param {array} phoneNumbers
 *   An array of objects containing phone number information.
 * @param {string} type
 *   A string of prefPhoneNumberType
 *
 * @returns {obj}
 *   Contains the preferred phone number and type
 */
export const findPhoneNumber = (phoneNumbers, type) => {
  let phoneNumber;
  let prefPhone = {};
  if (Array.isArray(phoneNumbers)) {
    if (type) {
      phoneNumbers.forEach((val) => {
        if (val?.type === type) {
          phoneNumber = val.phoneNumber;
        }
      });
      prefPhone = { phoneNumber, type };
      return prefPhone;
    }
    if (!phoneNumber) {
      prefPhone =
        findPhoneNumber(phoneNumbers, 'Home Phone') ||
        findPhoneNumber(phoneNumbers, 'Mobile') ||
        findPhoneNumber(phoneNumbers, 'Business Phone');
    }
  }
  return prefPhone;
};

/**
 * Find the preferred email and type
 *
 * @param {array} emails
 *   An array of objects containing emails.
 * @param {string} type
 *   A string of prefEmailType
 *
 * @returns {obj}
 *   Contains the preferred email and type
 */
export const findEmail = (emails, type) => {
  let email;
  let prefEmail = {};
  if (Array.isArray(emails)) {
    if (type) {
      emails.forEach((val) => {
        if (val?.type === type) {
          email = val.email;
        }
      });
      prefEmail = { email, type };
      return prefEmail;
    }
    if (!email) {
      prefEmail =
        findEmail(emails, 'Home Email') ||
        findEmail(emails, 'Business Email') ||
        findEmail(emails, 'SAA Email') ||
        findEmail(emails, 'GSB Email') ||
        findEmail(emails, 'Other Email');
    }
  }
  return prefEmail;
};

/**
 * Find the user's preferred email type.
 *
 * @param {array} emails
 *   An array of objects containing email type.
 * @param {string} prefEmail
 *   Preferred email type.
 *
 * @returns {string|boolean}
 *   The pref email type
 */
export const findPreferredEmailType = (emails = [], prefEmail) => {
  let pref;

  emails.forEach((val) => {
    if (val?.emailAddress === prefEmail) {
      if (val?.type?.includes('SAA') || val?.type?.includes('GSB')) {
        pref = 'Other Email';
      } else {
        pref = val.type;
      }
    }
  });

  return pref;
};

/**
 * Set the window variables for the pre populated forms.
 * .
 * @param {*} userProfile
 */
const setGiveGabVars = (userProfile) => {
  // Set the `did` value to the encoded SUID variable.
  window.su_did = userProfile?.session?.encodedSUID || null;

  // Find the preferred email address. If none, use the one they logged in with.
  const email =
    findEmail(userProfile?.emails, userProfile?.contact?.preferredEmail) ||
    userProfile?.session.email;

  // Find the preferred phone number.
  const phoneNumber = findPhoneNumber(
    userProfile?.phoneNumbers,
    userProfile?.contact?.preferredPhoneType
  );

  // In the event that the Megaprofile information is not available, only the following fields would be prefilled:
  // - Digital Name (generated by combining the First and Last name)
  // - First Name
  // - Last Name
  // - Email
  window.su_dname =
    userProfile?.contact.name?.digitalName ||
    `${userProfile?.session?.firstName} ${userProfile?.session?.lastName}`;
  window.su_first_name =
    userProfile?.contact.name?.fullNameParsed?.firstName ||
    userProfile?.session?.firstName ||
    '';
  window.su_last_name =
    userProfile?.contact.name?.fullNameParsed?.lastName ||
    userProfile?.session?.lastName ||
    '';
  window.su_email = email || userProfile?.session?.email || '';
  window.su_birthDate = userProfile?.contact.birthDate || '';
  window.su_phone = phoneNumber || '';
};

/**
 * Unset the window variables for the pre populated forms.
 */
const unsetGiveGabVars = () => {
  delete window.su_did;
  delete window.su_dname;
  delete window.su_first_name;
  delete window.su_last_name;
  delete window.su_email;
  delete window.su_birthDate;
  delete window.su_phone;
};

export { setGiveGabVars, unsetGiveGabVars };
